<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.CacheMemoryUtil">
            <summary>
            内存缓存帮助类
            </summary>
        </member>
        <member name="P:Common.CacheMemoryUtil.Cache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="P:Common.CacheMemoryUtil.option">
            <summary>
            缓存参数
            </summary>
        </member>
        <member name="M:Common.CacheMemoryUtil.#ctor(Microsoft.Extensions.Caching.Memory.MemoryCacheOptions)">
            <summary>
            构造内存缓存对象
            </summary>
            <param name="_option">参数</param>
        </member>
        <member name="M:Common.CacheMemoryUtil.Exists(System.String)">
            <summary>
            是否存在key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheMemoryUtil.Set(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresSliding">滑动过期时间(一段内不访问，则清空缓存，访问后，按滑动时间重新计算)，null则不设置</param>
            <param name="expiressAbsoulte">绝对过期时间，null则不设置</param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheMemoryUtil.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.CacheMemoryUtil.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.CacheMemoryUtil.GetString(System.String)">
            <summary>
            获取字符串缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheMemoryUtil.Remove(System.String)">
            <summary>
            删除key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Common.CacheMemoryUtil.Dispose">
            <summary>
            释放缓存
            </summary>
        </member>
        <member name="M:Common.CacheMemoryUtil.Rebuild">
            <summary>
            重新创建缓存
            </summary>
        </member>
        <member name="T:Common.CacheRedisUtil">
            <summary>
            内存缓存帮助类
            </summary>
        </member>
        <member name="P:Common.CacheRedisUtil.Cache">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="M:Common.CacheRedisUtil.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造Redis缓存对象
            </summary>
            <param name="ip"></param>
            <param name="port">端口号</param>
            <param name="database">使用数据库编号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Common.CacheRedisUtil.Exists(System.String)">
            <summary>
            是否存在key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheRedisUtil.Set(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresSliding">滑动过期时间(一段内不访问，则清空缓存，访问后，按滑动时间重新计算)，null则不设置</param>
            <param name="expiressAbsoulte">绝对过期时间，null则不设置</param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheRedisUtil.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.CacheRedisUtil.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.CacheRedisUtil.GetString(System.String)">
            <summary>
            获取字符串缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.CacheRedisUtil.Remove(System.String)">
            <summary>
            删除key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Common.CacheRedisUtil.Dispose">
            <summary>
            释放缓存
            </summary>
        </member>
        <member name="M:Common.CacheRedisUtil.Rebuild">
            <summary>
            重新创建缓存
            </summary>
        </member>
        <member name="T:Common.ICacheUtil">
            <summary>
            缓存接口，两种实现：CacheMemoryUtil和CacheReidsUtil
            </summary>
        </member>
        <member name="M:Common.ICacheUtil.Exists(System.String)">
            <summary>
            是否存在key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ICacheUtil.Set(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
            添加缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresSliding">滑动过期时间(一段内不访问，则清空缓存，访问后，按滑动时间重新计算)，null则不设置</param>
            <param name="expiressAbsoulte">绝对过期时间，null则不设置</param>
            <returns></returns>
        </member>
        <member name="M:Common.ICacheUtil.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.ICacheUtil.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:Common.CustomException.BaseException">缓存不存在</exception>
        </member>
        <member name="M:Common.ICacheUtil.GetString(System.String)">
            <summary>
            获取字符串缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ICacheUtil.Remove(System.String)">
            <summary>
            删除key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Common.ICacheUtil.Dispose">
            <summary>
            释放缓存
            </summary>
        </member>
        <member name="M:Common.ICacheUtil.Rebuild">
            <summary>
            重新创建缓存
            </summary>
        </member>
        <member name="T:Common.CompressUtil">
            <summary>
            压缩帮助类
            </summary>
        </member>
        <member name="M:Common.CompressUtil.UnCompressFile(System.String,System.String,System.Boolean)">
            <summary>
            解压缩  rar  zip  tar
            </summary>
            <param name="SourceFileName">源压缩文件路径</param>
            <param name="DesDirName">解压文件夹路径</param>
            <param name="Overwite">覆盖原文件</param>
        </member>
        <member name="M:Common.CompressUtil.CompressFile(System.String,System.String,System.Boolean)">
            <summary>
            压缩文件 压缩成zip
            </summary>
            <param name="SourcePath">源文件路径，文件或文件夹路径</param>
            <param name="DestZipName">压缩文件路径.zip</param>
            <param name="OnlyContent">只压缩文件夹里的内容(源文件为文件夹才有效)</param>
        </member>
        <member name="M:Common.CompressUtil.CompressFile(System.String[],System.String)">
            <summary>
            压缩文件 压缩成zip
            </summary>
            <param name="SourcePath">源文件路径们，文件或文件夹路径</param>
            <param name="DestZipName">压缩文件路径.zip</param>
        </member>
        <member name="M:Common.CompressUtil.CompressFile(System.String,System.Boolean)">
            <summary>
            压缩文件成zip，返回流
            </summary>
            <param name="SourcePath">源文件路径们，文件或文件夹路径</param>
            <param name="OnlyContent">只压缩文件夹里的内容(源文件为文件夹才有效)</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:Common.CompressUtil.CompressFile(System.String[])">
            <summary>
            压缩文件成zip，返回流
            </summary>
            <param name="SourcePath">源文件路径们，文件或文件夹路径</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:Common.CompressUtil.CompressAll(SharpCompress.Archives.Zip.ZipArchive,System.String[],System.Nullable{System.Boolean})">
            <summary>
            压缩主方法
            </summary>
            <param name="archive"></param>
            <param name="SourcePath"></param>
            <param name="OnlyContent">只压缩文件夹里的内容(源文件为文件夹才有效)</param>
        </member>
        <member name="M:Common.CompressUtil.CompressDirDetail(SharpCompress.Archives.Zip.ZipArchive,System.IO.DirectoryInfo,System.String)">
            <summary>
            压缩文件夹
            </summary>
            <param name="archive"></param>
            <param name="dir"></param>
            <param name="rootPath"></param>
        </member>
        <member name="M:Common.CompressUtil.CompressFileDetail(SharpCompress.Archives.Zip.ZipArchive,System.IO.FileInfo,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="archive"></param>
            <param name="fi"></param>
            <param name="rootPath"></param>
        </member>
        <member name="T:Common.CronUtil">
            <summary>
            定时帮助类，基于Quartz.net
            </summary>
        </member>
        <member name="P:Common.CronUtil.sche">
            <summary>
            调度
            </summary>
        </member>
        <member name="F:Common.CronUtil.LogFileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:Common.CronUtil.LogDirName">
            <summary>
            job运行记录日志的文件夹名
            </summary>
        </member>
        <member name="F:Common.CronUtil.lockObj">
            <summary>
            启动调度的时候，锁定用
            </summary>
        </member>
        <member name="M:Common.CronUtil.InitScheduler">
            <summary>
            初始化调度
            </summary>
        </member>
        <member name="P:Common.CronUtil.dicAllJob">
            <summary>
            所有正在运行的Job列表
            </summary>
        </member>
        <member name="M:Common.CronUtil.AddCronJob(System.String,System.String,System.Action,System.Boolean,System.Boolean)">
            <summary>
            添加cron定时job
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="cron">cron表达式</param>
            <param name="doing">需要执行的方法</param>
            <param name="runNow">即使未到cron时间，也立即执行一次，默认false，不立即执行</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.AddHourJob(System.String,System.Int32,System.Action,System.Int32,System.Boolean)">
            <summary>
            添加间隔小时定时,添加后立即启动
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="hour">小时间隔</param>
            <param name="doing">需要执行的方法</param>
            <param name="repeatCount">重复次数，-1为永远重复,0只执行一次</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.AddMinuteJob(System.String,System.Int32,System.Action,System.Int32,System.Boolean)">
            <summary>
            添加间隔分钟定时,添加后立即启动
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="minute">分钟间隔</param>
            <param name="doing">需要执行的方法</param>
            <param name="repeatCount">重复次数，-1为永远重复,0只执行一次</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.AddSecondJob(System.String,System.Int32,System.Action,System.Int32,System.Boolean)">
            <summary>
            添加间隔秒定时,添加后立即启动
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="second">秒间隔</param>
            <param name="doing">需要执行的方法</param>
            <param name="repeatCount">重复次数，-1为永远重复,0只执行一次</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.AddJob(System.String,Quartz.TriggerBuilder,System.Action,System.Boolean)">
            <summary>
            添加定时job
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="tri">触发器</param>
            <param name="doing">需要执行的方法</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.AddJob(System.String,System.Collections.Generic.List{Quartz.TriggerBuilder},System.Action,System.Boolean)">
            <summary>
            添加定时job
            </summary>
            <param name="name">job名称，不能重复</param>
            <param name="listTri">触发器们</param>
            <param name="doing">需要执行的方法</param>
            <param name="isContinue">上次未执行完，本次是否触发执行，默认false等待上次执行结束</param>
        </member>
        <member name="M:Common.CronUtil.StopJob(System.String)">
            <summary>
            停止job
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Common.ExecuteJobContinue">
            <summary>
            正常执行的类
            </summary>
        </member>
        <member name="M:Common.ExecuteJobContinue.Execute(Quartz.IJobExecutionContext)">
            <summary>
            执行入口 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Common.ExecuteJob">
            <summary>
            上次未执行完，本次不执行
            </summary>
        </member>
        <member name="T:Common.CustomException.BaseException">
            <summary>
            自定义异常，用于过滤异常
            </summary>
        </member>
        <member name="M:Common.CustomException.BaseException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.CustomException.BaseException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Common.CustomException.BaseException.GetInnerException(System.Exception)">
            <summary>
            获取最底层异常类信息（递归获取，多个异常，只会获取到第一个）
            </summary>
            <param name="e">异常</param>
            <returns>最底层异常类</returns>
        </member>
        <member name="T:Common.EncryptUtil">
            <summary>
            AES对称算法加密
            </summary>
        </member>
        <member name="M:Common.EncryptUtil.EncryptDES(System.String,System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <param name="iv">向量字符串，可不填写</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:Common.EncryptUtil.DecryptDES(System.String,System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <param name="iv">向量字符串，可不填写</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:Common.EncryptUtil.GetMd5(System.String,System.Text.Encoding)">
            <summary>
            获取md5
            </summary>
            <param name="str">明文串</param>
            <param name="encoding">不填写是Utf8</param>
            <returns></returns>
        </member>
        <member name="T:Common.EnumUtil">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:Common.EnumUtil.ToEnum``1(System.String,System.Boolean)">
            <summary>
            获取枚举对象
            </summary>
            <typeparam name="T">枚举对象</typeparam>
            <param name="eName">枚举名称</param>
            <param name="isIgnoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumNameList(System.Enum)">
            <summary>
            获取所有枚举字符串列表
            </summary>
            <param name="e">枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumNameList(System.Type)">
            <summary>
            获取所有枚举字符串列表
            </summary>
            <param name="eType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumValueList(System.Type)">
            <summary>
            获取枚举所有数值
            </summary>
            <param name="eType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumValueList(System.Enum)">
            <summary>
            获取枚举所有数值
            </summary>
            <param name="e">枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumDescription(System.Enum,System.Boolean)">
            <summary>
            获取枚举项的Description属性描述
            </summary>
            <param name="e"></param>
            <param name="isDesc2">是否是Description2Attribute</param>
            <returns>Description属性描述</returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumDescriptionList(System.Type,System.Boolean)">
            <summary>
            获取枚举的所有Description属性描述
            </summary>
            <param name="eType">枚举类型</param>
            <param name="isDesc2">是否是Description2Attribute</param>
            <returns>Description属性描述List</returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumDescriptionList(System.Enum)">
            <summary>
            获取枚举的所有Description属性描述
            </summary>
            <param name="e">枚举对象</param>
            <returns>Description属性描述List</returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumDescriptionDic(System.Type,System.Boolean)">
            <summary>
            获取枚举的所有Description属性描述和枚举名称
            key:枚举名称  value:Description
            </summary>
            <param name="eType">枚举类型</param>
            <param name="isDesc2">是否是Description2Attribute</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumDescriptionDic(System.Enum)">
            <summary>
            获取枚举的所有Description属性描述和枚举名称
            key:枚举名称  value:Description
            </summary>
            <param name="e">枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumNameValueDic(System.Type)">
            <summary>
            获取枚举的所有Description属性描述和枚举名称
            key:枚举名称  value:枚举数字
            </summary>
            <param name="eType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Common.EnumUtil.GetEnumNameValueDic(System.Enum)">
            <summary>
            获取枚举的所有Description属性描述和枚举名称
            key:枚举名称  value:枚举数字
            </summary>
            <param name="e">枚举对象</param>
            <returns></returns>
        </member>
        <member name="T:Common.Description2Attribute">
            <summary>
            枚举的第二个属性，方便使用，有需要的话，再增加第三个
            </summary>
        </member>
        <member name="T:Common.ExcelUtil">
            <summary>
            excel帮助类，简单的excel导出
            </summary>
        </member>
        <member name="M:Common.ExcelUtil.ExportFile(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.ArrayList},System.String,System.String)">
            <summary>
            导出Excel到文件
            </summary>
            <param name="FilePath">目的路径</param>
            <param name="SheetName">页签名称</param>
            <param name="Data">数据，key:列名  value:这列的值，会根据数据类型来输出</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.ExportStream(System.Collections.Generic.Dictionary{System.String,System.Collections.ArrayList},System.String,System.String)">
            <summary>
            返回excel的内存流
            </summary>
            <param name="SheetName">页签名称</param>
            <param name="Data">数据，key:列名  value:这列的值，会根据数据类型来输出</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.Export(System.Collections.Generic.Dictionary{System.String,System.Collections.ArrayList},System.String,System.String)">
            <summary>
            导出Excel
            </summary>
            <param name="SheetName">页签名称</param>
            <param name="Data">数据，key:列名  value:这列的值，会根据数据类型来输出</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.ExportFile(System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            导出Excel到文件
            </summary>
            <param name="FilePath">目的路径</param>
            <param name="SheetName">页签名称</param>
            <param name="Data">数据</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.ExportStream(System.Data.DataTable,System.String,System.String)">
            <summary>
            返回excel的内存流
            </summary>
            <param name="SheetName">页签名称</param>
            <param name="Data">数据</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.Export(System.Data.DataTable,System.String,System.String)">
            <summary>
            datatable导出Excel
            </summary>
            <param name="Data">数据</param>
            <param name="SheetName">页签名称</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.ExportFile``1(System.String,System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            导出Excel到文件
            </summary>
            <param name="FilePath">目的路径</param>
            <param name="SheetName">页签名称</param>
            <param name="Data">每个对象作为一行的数据</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.ExportStream``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            返回excel的内存流
            </summary>
            <param name="SheetName">页签名称</param>
            <param name="Data">每个对象作为一行的数据</param>
            <param name="FirstColumnIndexName">第一列序号列名称，写此参数，会在第一列加自增序号</param>
        </member>
        <member name="M:Common.ExcelUtil.Export``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            类导出到Excel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Data">每个对象作为一行的数据</param>
            <param name="FirstColumnIndexName">在第一列加自增序列</param>
            <param name="SheetName">页签名称</param>
        </member>
        <member name="M:Common.ExcelUtil.AddColData(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32,System.Collections.ArrayList)">
            <summary>
            按列插入 
            </summary>
            <param name="sheet">页签</param>
            <param name="startRow">起始行号</param>
            <param name="startCol">起始列号</param>
            <param name="colData">填充列的数组</param>
        </member>
        <member name="M:Common.ExcelUtil.AddRowData(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32,System.Collections.ArrayList)">
            <summary>
            按行插入
            </summary>
            <param name="sheet">页签</param>
            <param name="startRow">起始行号</param>
            <param name="startCol">起始列号</param>
            <param name="rowData">填充行的数组</param>
        </member>
        <member name="M:Common.ExcelUtil.CreateWorkbook(System.String,System.Int32,System.String,System.Int32@)">
            <summary>
            创建workbook，如果有序号列名，则会给numCurrentCol+1
            </summary>
            <param name="SheetName">页签名称</param>
            <param name="count">行数</param>
            <param name="FirstColumnIndexName">在第一列添加自增序列</param>
            <param name="numCurrentCol">当前列号</param>
            <returns></returns>
        </member>
        <member name="T:Common.FileUtil">
            <summary>
            文件工具
            </summary>
        </member>
        <member name="M:Common.FileUtil.GetMD5(System.String)">
            <summary>
            获取文件md5值
            </summary>
            <param name="path"></param>
            <returns>md5字符串</returns>
        </member>
        <member name="M:Common.FileUtil.GetSHA1(System.String)">
            <summary>
            获取文件哈希值
            </summary>
            <param name="path"></param>
            <returns>hash码字符串</returns>
        </member>
        <member name="M:Common.FileUtil.WatchFileChanged(System.String,System.Action{System.IO.FileSystemEventArgs},System.String,System.Action{System.IO.RenamedEventArgs})">
            <summary>
            监视文件/文件夹改变，包括子文件夹的内容
            </summary>
            <param name="DirectoryPath">监视的文件夹</param>
            <param name="ChangeAction">文件修改时执行的方法(改变文件的全路径,文件改变事件类型)</param>
            <param name="Filter">文件过滤，可以是某个文件名a.txt，也可以是通配符*.txt，默认是*.*</param>
            <param name="RenameAction">重命名时执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileUtil.Copy(System.String,System.String,System.Boolean)">
            <summary>
            复制文件夹或文件
            </summary>
            <param name="SourcePath">源路径</param>
            <param name="DestinationPath">目的路径</param>
            <param name="overwriteexisting">是否覆盖</param>
        </member>
        <member name="M:Common.FileUtil.ReadFileShare(System.String,System.Text.Encoding)">
            <summary>
            非独占方式读取文件(文件需要有读权限)
            </summary>
            <param name="path">文件全路径</param>
            <param name="encoding">编码格式 默认是utf8格式</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Common.FileUtil.GetAllFiles(System.String,System.Boolean)">
            <summary>
            获取文件夹中的文件全路径
            </summary>
            <param name="dir">文件夹路径</param>
            <param name="deep">深度查找，是否包括文件夹中的文件</param>
            <returns>文件绝对路径集合</returns>
        </member>
        <member name="M:Common.FileUtil.GetAllFilesDeep(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            递归获取文件名
            </summary>
            <param name="path">路径</param>
            <param name="deep">深度查找，是否包括文件夹中的文件</param>
            <param name="ret">文件绝对路径集合</param>
            <returns>文件绝对路径集合</returns>
        </member>
        <member name="M:Common.FileUtil.GetType(System.String)">
            <summary>
            给定文件的路径，读取文件的二进制数据，判断文件的编码类型
            </summary>
            <param name="FILE_NAME">文件路径</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Common.FileUtil.GetType(System.IO.FileStream)">
            <summary>
            通过给定的文件流，判断文件的编码类型
            </summary>
            <param name="fs">文件流</param>
            <returns>文件的编码类型</returns>
        </member>
        <member name="M:Common.FileUtil.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Common.LogUtil">
            <summary>
            记录日志，输出到文件
            </summary>
        </member>
        <member name="F:Common.LogUtil.PrintInfo">
            <summary>
            Info类型日志,输出到控制台，默认false
            </summary>
        </member>
        <member name="F:Common.LogUtil.PrintDebug">
            <summary>
            Debug类型日志,输出到控制台，默认false
            </summary>
        </member>
        <member name="F:Common.LogUtil.PrintError">
            <summary>
            Error类型日志,输出到控制台，默认false
            </summary>
        </member>
        <member name="F:Common.LogUtil.PrintWarning">
            <summary>
            Warning类型日志,输出到控制台，默认false
            </summary>
        </member>
        <member name="F:Common.LogUtil.WriteInfo">
            <summary>
            是否输出Info日志，默认true
            </summary>
        </member>
        <member name="F:Common.LogUtil.WriteDebug">
            <summary>
            是否输出Debug日志，默认true
            </summary>
        </member>
        <member name="F:Common.LogUtil.WriteError">
            <summary>
            是否输出Error日志，默认true
            </summary>
        </member>
        <member name="F:Common.LogUtil.WriteWarning">
            <summary>
            是否输出Warning日志，默认true
            </summary>
        </member>
        <member name="M:Common.LogUtil.AddLog(System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Info_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddLog(System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Info_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddLog(System.String,System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Info_日期
            在Log下，还可以继续创建文件夹
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="strDirName">文件夹名称，多级目录格式为:name1/name2/name3</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddDebugLog(System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Debug_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddDebugLog(System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Debug_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddDebugLog(System.String,System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Debug_日期
            在Log下，还可以继续创建文件夹
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="strDirName">文件夹名称，多级目录格式为:name1/name2/name3</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddErrorLog(System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Error_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddErrorLog(System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Error_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddErrorLog(System.String,System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Error_日期
            在Log下，还可以继续创建文件夹
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="strDirName">文件夹名称，多级目录格式为:name1/name2/name3</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddWarningLog(System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Warning_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddWarningLog(System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Warning_日期
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.AddWarningLog(System.String,System.String,System.String,System.Exception)">
            <summary>
            添加日志，保存为 Log_Warning_日期
            在Log下，还可以继续创建文件夹
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strPerfixName">日志文件名前缀,默认Log</param>
            <param name="strDirName">文件夹名称，多级目录格式为:name1/name2/name3</param>
            <param name="e">异常类传入则记录堆栈信息</param>
        </member>
        <member name="M:Common.LogUtil.StartDelLogTiming(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            启动定时删除日志，默认每天0天执行删除。
            例如25日0点，保留3天，则保留22、23、24、25日，22日之前的删除
            </summary>
            <param name="days">保留日志天数</param>
            <param name="startHour">启动删除时间，小时，默认0</param>
            <param name="startMinute">启动删除时间，分钟，默认0</param>
            <param name="startSecond">启动删除时间，秒，默认0</param>
        </member>
        <member name="M:Common.LogUtil.DelLog(System.String,System.DateTime)">
            <summary>
            删除日志
            </summary>
            <param name="LogPath">日志路径</param>
            <param name="dtDelBefore">删除这个时间之前的所有日志(不包括这个时间)</param>
        </member>
        <member name="M:Common.LogUtil.GetAllLogFileName(System.Nullable{Common.LogLevel},System.String,System.String)">
            <summary>
            获取日志文件全路径
            </summary>
            <param name="level">日志等级，不填写是所有等级</param>
            <param name="logDir">日志所在文件夹，不填写是所有文件夹</param>
            <param name="logPerfix">日志文件前缀，不填写是所有文件</param>
            <returns></returns>
        </member>
        <member name="M:Common.LogUtil.ReadLog(System.String)">
            <summary>
            根据日志路径，获取日志内容
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LogUtil.AddLog(System.String,System.String,System.String,Common.LogLevel,System.Exception)">
            <summary>
            添加日志根方法
            </summary>
            <param name="strContent">日志内容</param>
            <param name="strFileName">文件名</param>
            <param name="strDirName">文件夹名</param>
            <param name="level">日志等级</param>
            <param name="e">异常信息</param>
        </member>
        <member name="M:Common.LogUtil.NeedPrint(Common.LogLevel)">
            <summary>
            根据日志等级，获取是否打印
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LogUtil.NeedWriteFile(Common.LogLevel)">
            <summary>
            根据日志等级，获取是否输出到文件
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="F:Common.LogUtil.dicLogMission">
            <summary>
            每个日志文件都是一个集合，每个文件都有自己的线程存日志
            </summary>
        </member>
        <member name="T:Common.LogUtil.LogDetail">
            <summary>
            日志操作详情类
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.FileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.DirName">
            <summary>
            日志所在文件夹
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.Level">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.qList">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="F:Common.LogUtil.LogDetail.IsStop">
            <summary>
            是否已经停止写日志
            </summary>
        </member>
        <member name="M:Common.LogUtil.LogDetail.AddLogQueue(System.String)">
            <summary>
            添加到日志队列
            </summary>
            <param name="strContent"></param>
        </member>
        <member name="M:Common.LogUtil.LogDetail.WriteLog">
            <summary>
            开始写日志
            </summary>
        </member>
        <member name="T:Common.LogUtil.LogDetail.LogModel">
            <summary>
            日志模型
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.LogModel.LogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Common.LogUtil.LogDetail.LogModel.HappenTime">
            <summary>
            消息发生时间
            </summary>
        </member>
        <member name="T:Common.LogLevel">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="F:Common.LogLevel.Info">
            <summary>
            普通输出信息
            </summary>
        </member>
        <member name="F:Common.LogLevel.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:Common.LogLevel.Error">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="F:Common.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="T:Common.LogRead">
            <summary>
            读取日志类
            </summary>
        </member>
        <member name="P:Common.LogRead.LogDate">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:Common.LogRead.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="T:Common.ModelCheckUtil">
            <summary>
            模型验证帮助类
            System.ComponentModel.DataAnnotations
            </summary>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckModelResult``1(``0)">
            <summary>
            验证模型，返回验证结果，自行处理
            System.ComponentModel.DataAnnotations中的验证
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckModel``1(``0)">
            <summary>
            验证模型，返回是否通过
            System.ComponentModel.DataAnnotations中的验证
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="F:Common.ModelCheckUtil.dicParamInfo">
            <summary>
            方法缓存
            </summary>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckMethodParamsResult``1(``0,System.String,System.Object[])">
            <summary>
            验证方法参数(静态方法不可用)
            System.ComponentModel.DataAnnotations中的验证
            使用方法：在要验证的方法内部this.CheckMethodParamsResult(nameof(方法名),.....按顺序放入方法的参数)
            </summary>
            <param name="model"></param>
            <param name="methodName">方法名，使用nameof(方法)</param>
            <param name="paramsObjs">方法参数具体值，按顺序放入，注意:如果是List，请ToArray()</param>
            <returns></returns>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckMethodParamsResult``1(``0,System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            验证方法参数(静态方法不可用)
            System.ComponentModel.DataAnnotations中的验证
            使用方法：在要验证的方法内部this.CheckMethodParamsResult(nameof(方法名),.....按顺序放入方法的参数)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="paramInfos">方法的参数信息</param>
            <param name="paramsObjs">方法参数具体值，按顺序放入，注意:如果是List，请ToArray()</param>
            <returns></returns>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckMethodParams``1(``0,System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            验证方法参数(静态方法不可用)
            System.ComponentModel.DataAnnotations中的验证
            使用方法：在要验证的方法内部this.CheckMethodParamsResult(nameof(方法名),.....按顺序放入方法的参数)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="paramInfos">方法的参数信息</param>
            <param name="paramsObjs">方法参数具体值，按顺序放入，注意:如果是List，请ToArray()</param>
            <returns></returns>
        </member>
        <member name="M:Common.ModelCheckUtil.CheckMethodParams``1(``0,System.String,System.Object[])">
            <summary>
            验证方法参数(静态方法不可用)
            System.ComponentModel.DataAnnotations中的验证
            使用方法：在要验证的方法内部this.CheckMethodParamsResult(nameof(方法名),.....按顺序放入方法的参数)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="methodName">方法名，使用nameof(方法)</param>
            <param name="paramsObjs">方法参数具体值，按顺序放入，注意:如果是List，请ToArray()</param>
            <returns></returns>
        </member>
        <member name="T:Common.ValidResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Common.ValidResult.ErrorMembers">
            <summary>
            错误结果
            </summary>
        </member>
        <member name="P:Common.ValidResult.IsVaild">
            <summary>
            验证是否通过
            </summary>
        </member>
        <member name="T:Common.ErrorMember">
            <summary>
            报错信息
            </summary>
        </member>
        <member name="P:Common.ErrorMember.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Common.ErrorMember.ErrorMemberName">
            <summary>
            发生错误的变量名
            </summary>
        </member>
        <member name="T:Common.NetUtil">
            <summary>
            网络请求帮助类
            </summary>
        </member>
        <member name="M:Common.NetUtil.Post(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            post请求
            </summary>
            <param name="url">请求路径</param>
            <param name="postData">请求体body,json字符串</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.Post_ReturnString(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            post请求，返回请求结果字符串
            </summary>
            <param name="url">请求路径</param>
            <param name="postData">请求体body,json字符串</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.Post_ReturnStream(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            post请求，返回请求结果流
            </summary>
            <param name="url">请求路径</param>
            <param name="postData">请求体body,json字符串</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.Get_Stream(System.String,System.Net.HttpWebRequest)">
            <summary>
            Get请求，返回流
            </summary>
            <param name="url">请求地址</param>
            <param name="req">请求参数</param>
            <returns>内存流</returns>
        </member>
        <member name="M:Common.NetUtil.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get请求
            </summary>
            <param name="url">请求地址，参数加在这里</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.Get_ReturnString(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get请求，返回结果字符串
            </summary>
            <param name="url">请求地址，参数加在这里</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.Get_ReturnStream(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get请求，返回结果流
            </summary>
            <param name="url">请求地址，参数加在这里</param>
            <param name="dicHeader">请求头</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.CheckPortInUse(System.Int32)">
            <summary>
            检查服务器端口是否占用
            </summary>
            <param name="iPort">端口号</param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.GetIp(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            获取ip
            若没有匹配到headerName，返回RemoteIpAddress
            </summary>
            <param name="context"></param>
            <param name="headerName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.NetUtil.GetIp_Nginx(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            通过nginx获取ip，nginx需要配置X-Real-IP节点
            没有配置的话，返回RemoteIpAddress
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Common.ReflectionUtil">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:Common.ReflectionUtil.GetAssembly(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="dll">程序集名称/dll名称/dll全路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.ExecDll(System.String,System.String,System.String,System.Object[])">
            <summary>
            执行dll
            </summary>
            <param name="dllPath">dll名称或路径</param>
            <param name="className">全路径类名</param>
            <param name="funcName">方法名</param>
            <param name="param">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.ExecAssembly(System.Reflection.Assembly,System.String,System.String,System.Object[])">
            <summary>
            执行程序集
            </summary>
            <param name="assembly">程序集对象</param>
            <param name="className">全路径类名</param>
            <param name="funcName">方法名</param>
            <param name="param">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance``1(System.Reflection.Assembly,System.String,System.Object[],System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ass">程序集</param>
            <param name="className">命名空间.类名</param>
            <param name="param">实例化参数</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance``1(System.String,System.String,System.Object[],System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dllName">dll的名称，或者路径</param>
            <param name="className">命名空间.类名</param>
            <param name="param">实例化参数</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance``1(System.String,System.String,System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dllName">dll的名称，或者路径</param>
            <param name="className">命名空间.类名</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance``1(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ass">程序集</param>
            <param name="className">命名空间.类名</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance(System.String,System.String,System.Object[],System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <param name="dllName">dll的名称，或者路径</param>
            <param name="className">命名空间.类名</param>
            <param name="param">实例化参数</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance(System.Reflection.Assembly,System.String,System.Object[],System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <param name="ass">程序集</param>
            <param name="className">命名空间.类名</param>
            <param name="param">实例化参数</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance(System.String,System.String,System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <param name="dllName">dll的名称，或者路径</param>
            <param name="className">命名空间.类名</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Common.ReflectionUtil.GetInstance(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            反射获取实例
            </summary>
            <param name="ass">程序集</param>
            <param name="className">命名空间.类名</param>
            <param name="ignoreCase">查找类名时，是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="T:Common.SftpUtil">
            <summary>
            sftp文件帮助类
            </summary>
        </member>
        <member name="P:Common.SftpUtil.client">
            <summary>
            sftp客户端对象
            </summary>
        </member>
        <member name="P:Common.SftpUtil.timeKeepAlive">
            <summary>
            保持连接时长
            </summary>
        </member>
        <member name="M:Common.SftpUtil.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ip">远程连接ip</param>
            <param name="port">端口号</param>
            <param name="username">登录名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Common.SftpUtil.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="M:Common.SftpUtil.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:Common.SftpUtil.Dispose">
            <summary>
            释放当前对象
            </summary>
        </member>
        <member name="M:Common.SftpUtil.Get(System.String)">
            <summary>
            获取文件夹或文件
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Common.SftpUtil.GetDirList(System.String,System.Action{System.Int32})">
            <summary>
            获取远程文件夹列表
            </summary>
            <param name="path"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Common.SftpUtil.Upload(System.IO.Stream,System.String,System.Boolean,System.Action{System.UInt64})">
            <summary>
            上传文件
            </summary>
            <param name="input">文件流</param>
            <param name="path">目的路径</param>
            <param name="canOverride">可否覆盖，默认true</param>
            <param name="callback">上传完回调函数</param>
        </member>
        <member name="M:Common.SftpUtil.Upload(System.String,System.String,System.Boolean,System.Action{System.UInt64})">
            <summary>
            上传文件
            </summary>
            <param name="sourcePath">源路径</param>
            <param name="destPath">目的路径</param>
            <param name="canOverride">可否覆盖，默认true</param>
            <param name="callback">上传完回调函数</param>
        </member>
        <member name="M:Common.SftpUtil.DownloadFile(System.String,System.IO.Stream,System.Action{System.UInt64})">
            <summary>
            下载文件
            </summary>
            <param name="path">文件路径</param>
            <param name="output">获取的文件流</param>
            <param name="callback">回调函数</param>
        </member>
        <member name="T:Common.SocketUtil">
            <summary>
            Socket帮助类(服务器端和客户端都用此)
            消息头包括 4字节(int)内容长度+24字节真实ip(string)  共28字节
            </summary>
        </member>
        <member name="F:Common.SocketUtil.HeaderLength">
            <summary>
            消息头长度  包括4字节的内容长度  和24字节的真实ip
            </summary>
        </member>
        <member name="P:Common.SocketUtil.Ip">
            <summary>
            连接的ip
            </summary>
        </member>
        <member name="P:Common.SocketUtil.Port">
            <summary>
            连接的端口号
            </summary>
        </member>
        <member name="P:Common.SocketUtil.IpPort">
            <summary>
            ip:port
            </summary>
        </member>
        <member name="P:Common.SocketUtil.ClientRealIpPort">
            <summary>
            客户端真实ip和port
            </summary>
        </member>
        <member name="P:Common.SocketUtil.ClientRealIp">
            <summary>
            客户端真实Ip
            </summary>
        </member>
        <member name="P:Common.SocketUtil.ClientRealPort">
            <summary>
            客户端真实端口号
            </summary>
        </member>
        <member name="P:Common.SocketUtil.socketMain">
            <summary>
            Socket主对象
            </summary>
        </member>
        <member name="P:Common.SocketUtil.dicClient">
            <summary>
            Socket客户端集合
            </summary>
        </member>
        <member name="P:Common.SocketUtil.buffer">
            <summary>
            接收消息的字节数组  默认长度是10Mb
            </summary>
        </member>
        <member name="P:Common.SocketUtil.buffersize">
            <summary>
            缓冲字符长度默认是1024*1024*10  10Mb
            </summary>
        </member>
        <member name="P:Common.SocketUtil.listByte">
            <summary>
            真实数据的数组
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnMessage">
            <summary>
            服务器收到消息执行方法
            byte[]  接收到的字节数组
            int 数组实际内容长度
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnMessageString">
            <summary>
            服务器收到消息执行方法
            string  接收到的字符串
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnReceiveException">
            <summary>
            接收消息发生异常
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnSendException">
            <summary>
            发送消息时的异常
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnAccept">
            <summary>
            服务器端接收到连接
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnClose">
            <summary>
            关闭连接后执行
            </summary>
        </member>
        <member name="P:Common.SocketUtil.OnSent">
            <summary>
            发送消息后执行 int:消息的字节数
            </summary>
        </member>
        <member name="P:Common.SocketUtil.numRealFileLength">
            <summary>
            接收数据真正的总长度
            </summary>
        </member>
        <member name="P:Common.SocketUtil.IsServer">
            <summary>
            是否是服务器端
            </summary>
        </member>
        <member name="P:Common.SocketUtil.IsAsyncReceive">
            <summary>
            是否是异步接收数据，默认true
            </summary>
        </member>
        <member name="M:Common.SocketUtil.#ctor(System.String,System.Int32)">
            <summary>
            构建socket帮助类对象，服务器与客户端都用这个
            </summary>
            <param name="ip">服务器：监听本机ip；客户端：服务器ip</param>
            <param name="port">服务器：监听本机端口；客户端：服务器端口</param>
        </member>
        <member name="P:Common.SocketUtil.UseWaitAccept">
            <summary>
            使用等待接收消息(仅限客户端使用)
            </summary>
        </member>
        <member name="M:Common.SocketUtil.BuildServer">
            <summary>
            构建服务器端Socket
            </summary>
        </member>
        <member name="M:Common.SocketUtil.ExecuteReceive(Common.SocketUtil,System.Int32)">
            <summary>
            处理具体接收数据的方法
            </summary>
            <param name="socketItem"></param>
            <param name="count">接收数据字节长度</param>
        </member>
        <member name="M:Common.SocketUtil.Close(Common.SocketUtil)">
            <summary>
            关闭连接
            </summary>
            <param name="socketItem"></param>
        </member>
        <member name="M:Common.SocketUtil.BuildClient">
            <summary>
            建立客户端
            </summary>
        </member>
        <member name="M:Common.SocketUtil.WaitAccept(System.Action{System.String,Common.SocketUtil})">
            <summary>
            等待接收
            </summary>
        </member>
        <member name="M:Common.SocketUtil.SendString(System.String,Common.SocketUtil)">
            <summary>
            发送字符串，编码格式为utf-8
            </summary>
            <param name="data">发送的消息</param>
            <param name="socketItem">发送源socket对象，默认是当前socket</param>
        </member>
        <member name="M:Common.SocketUtil.Send(System.Byte[],Common.SocketUtil)">
            <summary>
            发送数据
            </summary>
            <param name="byteData">字节数组 自动添加下面信息 header:内容长度(int) 4字节；真实ip:port(string) 15字节</param>
            <param name="socketItem">发送源socket对象，默认是当前socket</param>
        </member>
        <member name="M:Common.SocketUtil.SendCallback(System.IAsyncResult)">
            <summary>
            发送数据后的方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Common.SocketUtil.Dispose">
            <summary>
            释放连接
            </summary>
        </member>
        <member name="T:Common.SocketMessage">
            <summary>
            Socket消息传递辅助类
            </summary>
        </member>
        <member name="P:Common.SocketMessage.MessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Common.SocketMessage.MessageContent">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="T:Common.SshUtil">
            <summary>
            ssh执行帮助类
            </summary>
        </member>
        <member name="P:Common.SshUtil.client">
            <summary>
            ssh客户端对象
            </summary>
        </member>
        <member name="P:Common.SshUtil.KeepAliveInterval">
            <summary>
            保持连接时长
            </summary>
        </member>
        <member name="M:Common.SshUtil.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ip">远程连接ip</param>
            <param name="port">端口号</param>
            <param name="username">登录名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Common.SshUtil.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="M:Common.SshUtil.DisConnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:Common.SshUtil.Dispose">
            <summary>
            释放当前对象
            </summary>
        </member>
        <member name="M:Common.SshUtil.ExecuteCmd(System.String,System.Boolean)">
            <summary>
            执行命令，并返回结果
            </summary>
            <param name="cmdText">命令</param>
            <param name="sourceProfile">命令前是否加上source /etc/profile，默认是false</param>
            <returns></returns>
        </member>
        <member name="M:Common.SshUtil.ExecuteCmdRetCmd(System.String,System.Boolean)">
            <summary>
            执行命令，并返回SshCommand，自行处理结果
            </summary>
            <param name="cmdText">命令</param>
            <param name="sourceProfile">命令前是否加上source /etc/profile，默认是false</param>
            <returns></returns>
        </member>
        <member name="T:Common.ThreadUtil">
            <summary>
            Thread类辅助使用，可立即停止其他无用线程
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.listTh">
            <summary>
            线程集合
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.listAutoEvent">
            <summary>
            等待线程状态集合
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.IsExpStop">
            <summary>
            某个线程出现异常，立即停止其他线程
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.ExceptionFirst">
            <summary>
            第一个异常
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.listException">
            <summary>
            所有异常的集合
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.HaveStop">
            <summary>
            是否已停止所有进程
            </summary>
        </member>
        <member name="P:Common.ThreadUtil.IsFinish">
            <summary>
            所有线程是否执行完成
            </summary>
        </member>
        <member name="M:Common.ThreadUtil.#ctor(System.Boolean)">
             <summary>
            
             </summary>
             <param name="isHasExceptionStop">遇到异常是否立即停止其他线程，默认停止(true)</param>
        </member>
        <member name="M:Common.ThreadUtil.AddThread(System.Action,System.Boolean,System.Boolean)">
            <summary>
            添加线程
            </summary>
            <param name="a">线程执行代码</param>
            <param name="isBackground">是否是后台线程</param>
            <param name="isImmidiateStart">是否立即启动，默认立即启动</param>
        </member>
        <member name="M:Common.ThreadUtil.StartAll">
            <summary>
            开始执行所有线程
            </summary>
        </member>
        <member name="M:Common.ThreadUtil.WaitAll(System.Boolean,System.Int32)">
            <summary>
            等待所有线程结束，结束后可自动抛出异常
            </summary>
            <param name="autoThrowException">线程结束后自动抛出异常，默认true</param>
            <param name="millsecondtimeout">超时时间，默认是-1永不超时</param>
            <returns>返回是否正常结束  true正常结束  false，超时停止</returns>
        </member>
        <member name="M:Common.ThreadUtil.StopAll(System.Threading.Thread)">
            <summary>
            停止所有线程
            </summary>
            <param name="currentThread">当前线程，不会停止当前线程</param>
        </member>
        <member name="T:Common.XmlUtil">
            <summary>
            xml序列化帮助类
            </summary>
        </member>
        <member name="M:Common.XmlUtil.XmlToModel``1(System.String)">
            <summary>
            将xml节点转成模型
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="xml">xml节点</param>
            <returns>模型</returns>
        </member>
        <member name="M:Common.XmlUtil.XmlToModel``1(System.IO.Stream)">
            <summary>
            将xml节点转成模型
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="stream">xml流</param>
            <returns>模型</returns>
        </member>
        <member name="M:Common.XmlUtil.ModelToXml``1(``0)">
            <summary>
            模型转xml
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="model">模型实体</param>
            <returns>XmlNode节点</returns>
        </member>
        <member name="M:Common.XmlUtil.XmlToJson(System.Xml.XmlNode)">
            <summary>
            将xml转成json字符串
            </summary>
            <param name="xml"></param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Common.XmlUtil.JsonToXml(System.String)">
            <summary>
            json字符串转xml(属性)
            </summary>
            <param name="json"></param>
            <returns>XmlNode节点</returns>
        </member>
        <member name="M:Common.XmlUtil.LoadByPath(System.String)">
            <summary>
            加载xml文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlUtil.LoadByString(System.String)">
            <summary>
            加载xml字符串
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlUtil.SaveXml``1(System.String,``0)">
            <summary>
            保存xml
            </summary>
            <typeparam name="T">模型</typeparam>
            <param name="path">xml路径</param>
            <param name="xmlModel">保存的类</param>
        </member>
        <member name="M:Common.XmlUtil.SetXmlNodeAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置节点属性
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Common.XmlUtil.GetXmlNodeAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="node">节点</param>
            <param name="strAttributeName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Common.CData">
            <summary>
            xml序列化cdata时，作为一个节点，使用时，标签打上[XmlElement("name")]
            </summary>
        </member>
        <member name="M:Common.CData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.CData.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="p_Value"></param>
        </member>
        <member name="P:Common.CData.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.CData.ReadXml(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Common.CData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Common.CData.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.CData.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.CData.op_Implicit(Common.CData)~System.String">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Common.CData.op_Implicit(System.String)~Common.CData">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Common.XmlDictionary`2">
            <summary>
            xml序列化用的Dictionary
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.XmlDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
                从对象的 XML 表示形式生成该对象(反序列化)
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:Common.XmlDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
                将对象转换为其 XML 表示形式(序列化)
            </summary>
            <param name="xw"></param>
        </member>
        <member name="T:System.DataTableUtil">
            <summary>
            DataTable帮助类
            </summary>
        </member>
        <member name="M:System.DataTableUtil.ToList``1(System.Data.DataTable,System.Boolean)">
            <summary>
            DataTable转模型，只赋值公共属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="ignoreCase">忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:System.DataTableUtil.ToList``1(System.Data.DataTable,System.Func{System.Int32,System.Data.DataRow,System.Data.DataColumnCollection,``0})">
            <summary>
            DataTable转模型，自己给模型赋值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="customeOperateFunc">自定义操作赋值，参数：int行号，DataRow行值，DataColumnCollection列名</param>
            <returns></returns>
        </member>
        <member name="M:System.DataTableUtil.ToDictionary``1(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            DataTable转Dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="colKeyName">主键列名</param>
            <param name="ignoreCase">是否忽略列名大小写</param>
            <returns></returns>
        </member>
        <member name="M:System.DataTableUtil.ToDataTable(System.Data.DataRow[])">
            <summary>
            转换成DataTable
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:System.DateTimeUtil">
            <summary>
            日期扩展方法
            </summary>
        </member>
        <member name="M:System.DateTimeUtil.ToyyyyMMdd(System.DateTime)">
            <summary>
            格式化日期为yyyy-MM-dd
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeUtil.ToyyyyMMddCH(System.DateTime)">
            <summary>
            格式化日期为yyyy年MM月dd日
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeUtil.ToyyyyMMddHHmmss(System.DateTime)">
            <summary>
            格式化日期为yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeUtil.ToyyyyMMddHHmmssCH(System.DateTime)">
            <summary>
            格式化日期为yyyy年MM月dd日 HH:mm:ss
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeUtil.GetTimestamp">
            <summary>
            获取当前unix时间戳(13位)
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.DateTimeUtil.GetDateTimeByTimestamp(System.String)">
            <summary>
            utc时间戳，转本地时间
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="T:System.ObjectUtil">
            <summary>
            Object扩展方法
            </summary>
        </member>
        <member name="M:System.ObjectUtil.CloneNewtonJson``1(``0)">
            <summary>
            克隆对象（按照NewtonJson方式）
            </summary>
            <typeparam name="T">可序列化的类</typeparam>
            <param name="obj"></param>
            <returns>克隆后的对象</returns>
        </member>
        <member name="M:System.ObjectUtil.In(System.Object,System.Object[])">
            <summary>
            类似sql的in方法，比较对象是否出现在某个范围(只有基础类型可以使用)
            </summary>
            <param name="obj"></param>
            <param name="compareObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.NotIn(System.Object,System.Object[])">
            <summary>
            类似sql的not in用法，所有都不包含，才返回true(只有基础类型可以使用)
            </summary>
            <param name="obj"></param>
            <param name="notContainObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.JoinToString``1(``0[],System.String)">
            <summary>
            数组拼接成字符串，默认逗号拼接
            </summary>
            <param name="list"></param>
            <param name="separator">字符串分隔符，默认逗号</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.JoinToString``1(``0[],System.Func{``0,System.Object},System.String)">
            <summary>
            数组拼接成字符串，默认逗号拼接
            </summary>
            <param name="list"></param>
            <param name="selectField">筛选拼接的字段</param>
            <param name="separator">字符串分隔符，默认逗号</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            数组拼接成字符串，默认逗号拼接
            </summary>
            <param name="list"></param>
            <param name="separator">字符串分隔符，默认逗号</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object},System.String)">
            <summary>
            数组拼接成字符串，默认逗号拼接
            </summary>
            <param name="list"></param>
            <param name="selectField">筛选拼接的字段</param>
            <param name="separator">字符串分隔符，默认逗号</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.SerializeNewtonJson(System.Object,System.Boolean)">
            <summary>
            序列化(按照NewtonJson方式序列化)，日期格式为yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="obj"></param>
            <param name="isFormat">格式化序列化后的字符串，默认false</param>
            <returns>序列化后的字符串</returns>
        </member>
        <member name="M:System.ObjectUtil.SerializeNewtonJson(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化(按照NewtonJson方式序列化)
            </summary>
            <param name="obj"></param>
            <param name="setting">序列化配置</param>
            <returns>序列化后的字符串</returns>
        </member>
        <member name="M:System.ObjectUtil.SerializeNewtonJson(System.Object,System.Boolean,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            序列化(按照NewtonJson方式序列化)
            </summary>
            <param name="obj"></param>
            <param name="isFormat">格式化序列化后的字符串，默认false</param>
            <param name="setting">序列化配置</param>
            <returns>序列化后的字符串</returns>
        </member>
        <member name="M:System.ObjectUtil.ToInt(System.Object,System.Boolean)">
            <summary>
            Convert.ToInt32，参数为true时忽略转换失败
            </summary>
            <param name="obj"></param>
            <param name="ignoreError">忽略错误，转换错误时，返回0</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToIntNullable(System.Object)">
            <summary>
            Nullable int
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToDouble(System.Object,System.Boolean)">
            <summary>
            Convert.ToDouble，参数为true时忽略转换失败
            </summary>
            <param name="obj"></param>
            <param name="ignoreError">忽略错误，转换错误时，返回0</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToDoubleNullable(System.Object)">
            <summary>
            Nullable double
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToLong(System.Object,System.Boolean)">
            <summary>
            Convert.ToInt64，参数为true时忽略转换失败
            </summary>
            <param name="obj"></param>
            <param name="ignoreError">忽略错误，转换错误时，返回0</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToLongNullable(System.Object)">
            <summary>
            Nullable long
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToDecimal(System.Object,System.Boolean)">
            <summary>
            Convert.ToDecimal，参数为true时忽略转换失败
            </summary>
            <param name="obj"></param>
            <param name="ignoreError">忽略错误，转换错误时，返回0</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToDecimalNullable(System.Object)">
            <summary>
            Nullable decimal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToFloat(System.Object,System.Boolean)">
            <summary>
            Convert.ToSigle，参数为true时忽略转换失败
            谨慎使用！！！由于浮点数精度问题，转换结果可能有问题，不建议使用float
            </summary>
            <param name="obj"></param>
            <param name="ignoreError">忽略错误，转换错误时，返回0</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToFloatNullable(System.Object)">
            <summary>
            Nullable float
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToBytes(System.Object)">
            <summary> 
            将一个object对象序列化，返回一个byte[]
            若是一个类，则需要给类打上[Serializable]标签
            </summary> 
            <param name="obj">能序列化的对象</param>         
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.ToObject(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原
            若是一个类，则需要给类打上[Serializable]标签
            </summary>
            <param name="Bytes"></param>         
            <returns></returns> 
        </member>
        <member name="M:System.ObjectUtil.ToEnum``1(System.Int32)">
            <summary>
            数字转枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.MappingTo``2(``0,System.Action{Mapster.TypeAdapterSetter{``0,``1}},System.Boolean)">
            <summary>
            自定义映射
            将类的属性，映射到另一个类，只能映射普通的类对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source"></param>
            <param name="customConfig">里面的对象，可以.Map(s=>s.Name,d=>d.name)来配置自定义映射</param>
            <param name="igoreCase">匹配时，忽略大小写，默认false</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.MappingTo``2(``0,``1,System.Boolean)">
            <summary>
            普通映射，映射到目的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目的类型</typeparam>
            <param name="source"></param>
            <param name="dest">映射目的对象</param>
            <param name="igoreCase">匹配时，忽略大小写，默认false</param>
            <returns></returns>
        </member>
        <member name="M:System.ObjectUtil.MappingTo``1(System.Object,System.Boolean)">
            <summary>
            普通类映射
            将类的属性，映射到另一个新的类
            </summary>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source"></param>
            <param name="igoreCase">匹配时，忽略大小写，默认false</param>
            <returns></returns>
        </member>
        <member name="F:System.ObjectUtil.dicTrimCache">
            <summary>
            trim类的缓存
            </summary>
        </member>
        <member name="M:System.ObjectUtil.TrimAll``1(``0)">
            <summary>
            对所有标记StringTrimAttribute的字符串进行trim
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
        </member>
        <member name="T:System.StringTrimAttribute">
            <summary>
            将字符串进行Trim，放在class上，将class的所有字符串进行trim
            可以new的模型才可以使用
            </summary>
        </member>
        <member name="P:System.StringTrimAttribute.NotTrim">
            <summary>
            不用进行trim
            </summary>
        </member>
        <member name="T:System.StringUtil">
            <summary>
            字符串工具
            </summary>
        </member>
        <member name="M:System.StringUtil.IsNullOrEmpty(System.String)">
            <summary>
            字符串是否为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.IsNullOrEmptyTrim(System.String)">
            <summary>
            字符串trim后是否为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.IsNotNullOrEmpty(System.String)">
            <summary>
            字符串是否为不为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            转换成base64的字符串
            </summary>
            <param name="s"></param>
            <param name="encoding">编码格式，默认是utf8</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ToStringFromBase64(System.String,System.Text.Encoding)">
            <summary>
            将base64字符串转成普通字符串
            </summary>
            <param name="base64str">base64字符串</param>
            <param name="encoding">编码格式，默认是utf8</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.Format(System.String,System.Object[])">
            <summary>
            string.Format格式化字符串
            </summary>
            <param name="s"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.DeserializeNewtonJson``1(System.String)">
            <summary>
            反序列化NewtonJson序列化的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.DeserializeNewtonJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            反序列化NewtonJson序列化的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ToDateTime(System.String,System.String)">
            <summary>
            字符串转日期
            </summary>
            <param name="s"></param>
            <param name="format">日期格式</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ToByteArr(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成byte数组
            </summary>
            <param name="s"></param>
            <param name="encoding">默认是utf8格式</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ByteToString(System.Byte[],System.Text.Encoding)">
            <summary>
            byte数组转字符串
            </summary>
            <param name="b"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.ToEnum``1(System.String,System.Boolean)">
            <summary>
            字符串转枚举
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="s"></param>
            <param name="ignoreCase">是否忽略大小写，默认false</param>
            <returns></returns>
        </member>
        <member name="M:System.StringUtil.RemoveEmoji(System.String)">
            <summary>
            删除微信昵称里的Emoji图片
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:System.TaskUtil">
            <summary>
            task线程帮助类
            </summary>
        </member>
        <member name="M:System.TaskUtil.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            设置异步超时时间
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.TaskUtil.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            设置异步超时时间
            </summary>
            <param name="task"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
    </members>
</doc>
